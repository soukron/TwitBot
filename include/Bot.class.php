<?php
/**
 * Bot.class.php - Twitter Bot main class
 *
 * This class implements, using Twitter API, basic functions:
 * Tweet, RT/ReTweet, follow people, get followers, Send/Receive DMs
 * 
 * It uses PDO to access to DB to store reference tokens
 *
 * Created based on Konstantin Kovshenin (aka kovshenin) work:
 * http://kovshenin.com/archives/twitter-robot-in-php-twibots-draft/
 *
 * @author 	Soukron <soukron@gmbros.net>
 * @version 	1.0
 * @copyright  	Copyright (c) 2009-2010 Soukron (soukron@gmbros.net)
 * @license    	http://www.gnu.org/licenses/gpl.html     GPL License
 */
require_once ("Twitter/TwitterOAuth.class.php");
require_once ("SigueMiLink/SigueMiLink.class.php");
require_once ("Log/Log.class.php");
class Bot {
	public $botName;
	protected $db;
	protected $tokens;
	protected $oauth;

	/**
	* __construct - Bot class Constructor 
	*
	* @param	string name		Bot name in Twitter
	* @param	string consumer_key	Consumer Key generated by Twitter
	* @param	string consumer_secret	Consumer Secret generated by Twitter
	* @param	string db_str		Database PDO string
	*/
	function __construct($name, $consumer_key, $consumer_secret, $db_str) {
		$this->botName = $name;

		$this->db = new PDO($db_str);
		$this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
		try {
			$this->tokens = array();
			foreach ($this->db->query("SELECT `token_name`, `token_value` FROM `tokens`") as $row)
				$this->tokens[$row["token_name"]] = $row["token_value"];
		}
		catch(PDOException $e) {
			echo $e->getMessage();
		}

		$access_token = $this->tokens["access_token"];
		$access_token_secret = $this->tokens["access_token_secret"];

		$this->oauth = new TwitterOAuth($consumer_key, $consumer_secret,
					$access_token, $access_token_secret);
	}

	/**
	* getMentions - Get the last 20 mentions
	*
	* This function gets the last 20 mentions where the bot appears
	*
	* @param	int count		Required mentions number (default: 20)
	* @param	array params		Extra parameters to API search
	* @return	array
	*/
	function getMentions($count = 20, $params = array()) {
		$params["count"] = $count;
		$mentions = $this->oauth->get("statuses/mentions" , $params);

		return $mentions;
	}

	/**
	* getDMs - Get the last 20 DMs sent to bot
	*
	* This function gets the last 20 DMs received
	*
	* @param	int count		Required DMs number (default: 20)
	* @param	array params		Extra parameters to API search
	* @return	array
	*/
	function getDMs($count = 20, $params = array()) {
		$params["count"] = $count;
		$dms = $this->oauth->get("direct_messages" , array("count" => $count));

		return $dms;
	}

	/**
	* checkRetweet - Analizes a text for common RT strings
	*
	* This function search in the text the two most common strings when 
	* retweeting:
	*   "RT @<usuario>" or "via @<usuario>"
	*
	* @param	object message		Message to analyze
	* @return	boolean
	*/
	function checkRetweet($message) {
		if (!$message) { return NULL; }
		$text = strtolower($message->text);
		$name = strtolower($this->botName);
		if (strpos($text, "rt @".$name) !== FALSE || strpos($text, "via @".$name) !== FALSE) {
			return TRUE;
		}

		return FALSE;
	}

	/**
	* getFollowers - Get all followers
	*
	* This function gets all followers
	*
	* @return	array
	*/
	function getFollowers() {
		return $this->oauth->get("statuses/followers", array());
	}

	/**
	* doFollow - Follow to someone
	*
	* This function makes the bot to follow some person
	*
	* @param	string screenName	Name to follow
	* @return	boolean
	*/
	function doFollow($screenName = NULL) {
		if (!$screenName) { return NULL; }

		$ret = $this->oauth->post("friendships/create/".$screenName, array());
		sleep(rand(5, 10));

		return ($ret->error ? NULL : $ret);
	}

	/**
	* doTweet - Post a tweet
	*
	* This function makes the bot to post a 140 characters tweet
	*
	* @param	string message	Text
	* @return	boolean
	*/
	function doTweet($message = NULL) {
		if (!$message) { return NULL; }
		if (strlen($message)>140) $message = substr($message, 0, 137)."...";

		$ret = $this->oauth->post("statuses/update", array("status" => $message));
		sleep(rand(5, 10));

		return $ret;
	}

	/**
	* doReTweet - Sends a ReTweet, using ReTweet API
	*
	* This function makes the bot to "retweet" a message using new API
	*
	* @param	int messageId	Message ID to retweet
	*/
	function doReTweet($messageId = NULL) {
		if (!$messageId) { return NULL; }

		$ret = $this->oauth->post("statuses/retweet/".$messageId, array());
		sleep(rand(5, 10));

		return $ret;
	}

	/**
	* doRT - Sends a ReTweet using the classic way
	*
	* This function makes the bot to "retweet" a message using the classic
	* way: RT @<user> <message>. If this string is longer than 140 characters
	* it creates a shorturl (using http://smlk.es service) to the original
	* tweet.
	*
	* @see		doTweet()
	* @see		doReTweet()
	* @param	object message	Message object get from API
	*/
	function doRT($message = NULL) {
		$text = "RT @".$message->user->screen_name." ".$message->text;

		if (strlen($text) > 140) {
			$smlk = new SMLK();
			$url = "http://twitter.com/".$message->user->screen_name."/status/".$message->id;
			$shortUrl = "http://smlk.es/".$smlk->createLink($url)->link;
			$max = 140 - 11 - strlen($message->user->screen_name) - strlen($shortUrl);

			$text = sprintf("RT \@%s %s... (%s)", $message->user->screen_name, substr($message->text,0, $max), $shortUrl);
			unset($smlk);
		}

		return $this->doTweet($text);
	}

	/**
	* doDM - Sends a DM to a specific username
	*
	* This function makes the bot to send a DM to a user
	*
	* @param	string screenName	Username
	* @param	string message		Message to send
	*/
	function doDM($screenName = NULL, $message = NULL) {
		if (!$screenName || !$message) { return NULL; }

		return $this->oauth->post("direct_messages/new", array("screen_name" => $screenName, "text" => $message));
	}

	/**
	* getToken - Get the value of a token
	* 
	* All tokens are loaded from database in __construct and are protected
	*
	* @param	string tokenName	Token name to get value
	* @return	string
	*
	* @see		__construct()
	*/
	function getToken($tokenName) {
		if ($tokenName) return $this->tokens[$tokenName];
	}

	/**
	* setToken - Set a value to a token 
	*
	* Setter to store tokens in database
	*
	* @param	string tokenName	Token name to set value
	* @param	string tokenValue	Value to store
	*
	* @see		__construct()
	*/
	function setToken($tokenName, $tokenValue) {
		if ($tokenName && $tokenValue) {
			$this->db->query("REPLACE INTO tokens (token_name, token_value) VALUES ('{$tokenName}', '{$tokenValue}');");
			$this->tokens[$tokenName] = $tokenValue;
		}
	}

	/**
	* getDbObject - Get the database object 
	*
	* Returns the database object to access it outside the class
	*
	* @return	object
	*/
	function getDbObject() {
		return $this->db;
	}

}
?>
